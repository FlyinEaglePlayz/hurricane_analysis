# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1_000_000,
              "B": 1_000_000_000}

# test function by updating damages
def convert_damages(damages):
  updated_damages = []

  for damage in damages:
    if damage == "Damages not recorded":
      updated_damages.append(damage)
    else:
      damage = damage.strip()

      number_part = damage[:-1]
      unit_part = damage[-1]

      number = float(number_part)
      converted_value = number * conversion[unit_part]

      formatted_value = "${:,.2f}".format(converted_value)

      updated_damages.append(formatted_value)

  return updated_damages

print(convert_damages(damages))

# 2 
# Create a Table
def create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths):
  hurricane_data = {}

  for i in range(len(names)):
    hurricane_info = {
      "Name": names[i],
      "Month": months[i],
      "Year": years[i],
      "Max Sustained Wind": max_sustained_winds[i],
      "Areas Affected": areas_affected[i],
      "Damage": damages[i],
      "Deaths": deaths[i]
    }

    hurricane_data[names[i]] = hurricane_info

  return hurricane_data

hurricane_dict = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths)

print(hurricane_dict["Cuba I"])


# 3
# Organizing by Year
def organize_by_year(hurricane_data):
  hurricanes_by_year = {}

  for hurricane in hurricane_dict.values():
    year = hurricane["Year"]

    if year not in hurricanes_by_year:
      hurricanes_by_year[year] = []

    hurricanes_by_year[year].append(hurricane)

  return hurricanes_by_year

hurricane_dictionary = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths)

hurricanes_by_year = organize_by_year(hurricane_dictionary)

print(hurricanes_by_year[1932])


# 4
# Counting Damaged Areas
def count_affected_areas(hurricane_dict):
  area_count = {}

  for hurricane in hurricane_dict.values():
    affected_areas = hurricane["Areas Affected"]

    for area in set(affected_areas):
      if area not in area_count:
        area_count[area] = 1
      else:
        area_count[area] += 1

  return area_count

hurricane_dictionary = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths)

area_counts = count_affected_areas(hurricane_dictionary)

print("Florida was hit:", area_counts["Florida"], "times")
print("Cuba was hit:", area_counts["Cuba"], "times")
print("The Bahamas was hit:", area_counts["The Bahamas"], "times")

# 5 
def most_affected_area(area_count):
  max_area = None
  max_count = 0

  for area, count in area_count.items():
    if count > max_count:
      max_area = area
      max_count = count

  return max_area, max_count

area_counts = count_affected_areas(hurricane_dictionary)

most_hit_area, hit_count = most_affected_area(area_counts)

print("The area most affected is:", most_hit_area)
print("It was hit", hit_count, "times")
# find most frequently affected area and the number of hurricanes involved in


# 6
def deadliest_hurricane(hurricane_dict):
  max_deaths = 0
  deadliest_hurricane = None

  for hurricane in hurricane_dict.values():
    deaths = hurricane["Deaths"]

    if deaths > max_deaths:
      max_deaths = deaths
      deadliest_hurricane = hurricane["Name"]

  return deadliest_hurricane, max_deaths

hurricane_dictionary = create_hurricane_dictionary(names, months, years, max_sustained_winds, areas_affected, damages, deaths)

deadliest_name, death_count = deadliest_hurricane(hurricane_dictionary)

print("The deadliest hurricane is:", deadliest_name)
print("It caused", death_count, "deaths")

# 7
# Rating Hurricanes by Mortality
def categorize_by_mortality(hurricane_dict):
  mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000,
                   5: float('inf')}
  mortality_dict = {
    0: [],
    1: [],
    2: [],
    3: [],
    4: [],
    5: []
  }
  for hurricane in hurricane_dict.values():
    deaths = hurricane["Deaths"]

    for rating, upper_bound in mortality_scale.items():
      if deaths <= upper_bound:
        mortality_dict[rating].append(hurricane)
        break

  return mortality_dict

mortality_dict = categorize_by_mortality(hurricane_dictionary)

for rating, hurricanes in mortality_dict.items():
  print(f"Mortality Rating {rating}: {len(hurricanes)} hurricane")



# 8 Calculating Hurricane Maximum Damage
def most_costly_hurricane(hurricane_dict):
  max_cost = 0
  most_expensive_hurricane = None

  for hurricane in hurricane_dict.values():
    damage = hurricane["Damage"]

    if damage == "Damage Not Recorded":
      continue
    
    try:
      damage = damage.replace("$", "").replace(",", "")

      if damage[-1] in conversion:
        damage = float(damage[:-1]) * conversion[damage[-1]]
      else:
        damage = float(damage)

    except ValueError:
      continue
    
    if damage > max_cost:
      max_cost = damage
      most_expensive_hurricane = hurricane["Name"]

  return most_expensive_hurricane, max_cost

most_expensive_name, max_cost = most_costly_hurricane(hurricane_dictionary)

print("The most costly hurricane is:", most_expensive_name)
print("it caused $", f"{max_cost:,.2f}", "in damage")
# find highest damage inducing hurricane and its total cost


# 9
def classify_by_damage(hurricane_dict):
  damage_scale = {0: 0,
                  1: 100000000,
                  2: 1000000000,
                  3: 10000000000,
                  4: 50000000000}

  hurricanes_by_damage = {
    0: [],
    1: [],
    2: [],
    3: [],
    4: [],
    5: []
  }  
# categorize hurricanes in new dictionary with damage severity as key
  for hurricane in hurricane_dict.values():
    damage = hurricane["Damage"]

    if damage == "Damage Not Recorded":
      hurricanes_by_damage[0].append(hurricane)
      continue

    try:
      damage = damage.replace("$", "").replace(",", "")

      if damage[-1] in conversion:
        damage = float(damage[:-1]) * conversion[damage[-1]]
      else:
        damage = float(damage)
    except ValueError:
      hurricanes_by_damage[0].append(hurricane)
      continue

    for rating, upper_bound in damage_scale.items():
      if damage <= upper_bound:
        hurricanes_by_damage[rating].append(hurricane)
        break

  return hurricanes_by_damage

hurricanes_by_damage = classify_by_damage(hurricane_dictionary)

for rating, hurricane in hurricanes_by_damage.items():
  print(f"Rating {rating}: {len(hurricane)} hurricane")


  
